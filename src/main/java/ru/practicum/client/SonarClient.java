package ru.practicum.client;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.extern.slf4j.Slf4j;
import org.apache.hc.client5.http.classic.methods.HttpPost;
import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;
import org.apache.hc.core5.http.io.entity.EntityUtils;
import org.apache.hc.core5.http.io.entity.StringEntity;
import org.springframework.stereotype.Component;
import ru.practicum.config.SonarConfig;
import ru.practicum.utils.MarkdownToHtmlConverter;

import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Slf4j
@Component
public class SonarClient implements AiClient {
    private final SonarConfig sonarConfig;
    private final ObjectMapper objectMapper;
    private final CloseableHttpClient httpClient;
    private final MarkdownToHtmlConverter markdownConverter;

    public SonarClient(SonarConfig sonarConfig, CloseableHttpClient httpClient) {
        this.sonarConfig = sonarConfig;
        this.httpClient = httpClient;
        this.objectMapper = new ObjectMapper();
        this.markdownConverter = new MarkdownToHtmlConverter();
    }

    @Override
    public String sendTextMessage(String userMessage, List<Map<String, String>> history) {
        try {
            String requestBody = createSonarRequestBody(userMessage, history);
            String apiUrl = sonarConfig.getBaseUrl() + "/chat/completions";
            HttpPost httpPost = new HttpPost(apiUrl);

            log.info("Sending Sonar request to: {}", apiUrl);

            httpPost.setHeader("Content-Type", "application/json");
            httpPost.setHeader("Authorization", "Bearer " + sonarConfig.getApiKey());
            httpPost.setEntity(new StringEntity(requestBody, StandardCharsets.UTF_8));

            try (CloseableHttpResponse response = httpClient.execute(httpPost)) {
                String responseBody = EntityUtils.toString(response.getEntity(), StandardCharsets.UTF_8);
                log.debug("Received Sonar response: {}", responseBody);
                if (response.getCode() == 200) {
                    return parseSonarResponse(responseBody);
                } else if (response.getCode() == 429) {
                    log.error("Sonar API quota exceeded: {}", responseBody);
                    return "üö´ –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ Sonar API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –≤ –∞–∫–∫–∞—É–Ω—Ç–µ Perplexity.";
                } else if (response.getCode() == 401) {
                    log.error("Sonar API authentication error: {}", responseBody);
                    return "üîê –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Sonar API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á Perplexity.";
                } else {
                    log.error("Sonar API error: Status {}, Response: {}", response.getCode(), responseBody);
                    return "‚ùå –û—à–∏–±–∫–∞ Sonar API (–∫–æ–¥: " + response.getCode() + "). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
                }
            }
        } catch (Exception e) {
            log.error("Error sending message to Sonar", e);
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage();
        }
    }

    @Override
    public String sendMessageWithImage(String userMessage, String base64Image, List<Map<String, String>> history) {
        try {
            String requestBody = createSonarImageRequestBody(userMessage, base64Image, history);
            String apiUrl = sonarConfig.getBaseUrl() + "/chat/completions";
            HttpPost httpPost = new HttpPost(apiUrl);

            log.debug("Sending Sonar image request to: {}", apiUrl);

            httpPost.setHeader("Content-Type", "application/json");
            httpPost.setHeader("Authorization", "Bearer " + sonarConfig.getApiKey());
            httpPost.setEntity(new StringEntity(requestBody, StandardCharsets.UTF_8));

            try (CloseableHttpResponse response = httpClient.execute(httpPost)) {
                String responseBody = EntityUtils.toString(response.getEntity(), StandardCharsets.UTF_8);
                log.debug("Received Sonar response: {}", responseBody);
                if (response.getCode() == 200) {
                    return parseSonarResponse(responseBody);
                } else if (response.getCode() == 429) {
                    log.error("Sonar API quota exceeded: {}", responseBody);
                    return "üö´ –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ Sonar API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –≤ –∞–∫–∫–∞—É–Ω—Ç–µ Perplexity.";
                } else if (response.getCode() == 401) {
                    log.error("Sonar API authentication error: {}", responseBody);
                    return "üîê –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Sonar API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á Perplexity.";
                } else {
                    log.error("Sonar API error: Status {}, Response: {}", response.getCode(), responseBody);
                    return "‚ùå –û—à–∏–±–∫–∞ Sonar API (–∫–æ–¥: " + response.getCode() + "). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
                }
            }
        } catch (Exception e) {
            log.error("Error sending image to Sonar", e);
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: " + e.getMessage();
        }
    }

    // Perplexity —Ç—Ä–µ–±—É–µ—Ç —Å—Ç—Ä–æ–≥–æ–≥–æ —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏—è user/assistant –ø–æ—Å–ª–µ system —Å–æ–æ–±—â–µ–Ω–∏–π
    private List<Map<String, String>> fixPerplexityMessageStructure(List<Map<String, String>> history) {
        if (history == null || history.isEmpty()) {
            return new ArrayList<>();
        }

        List<Map<String, String>> fixedMessages = new ArrayList<>();

        // –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ system –∏ –¥–∏–∞–ª–æ–≥–æ–≤—ã–µ
        List<Map<String, String>> systemMessages = new ArrayList<>();
        List<Map<String, String>> conversationMessages = new ArrayList<>();

        for (Map<String, String> message : history) {
            String role = message.get("role");
            String content = message.get("content");

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if (content == null || content.trim().isEmpty()) {
                continue;
            }

            if ("system".equals(role)) {
                systemMessages.add(message);
            } else if ("user".equals(role) || "assistant".equals(role)) {
                conversationMessages.add(message);
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–æ
        fixedMessages.addAll(systemMessages);

        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ user/assistant –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
        if (!conversationMessages.isEmpty()) {
            String expectedRole = "user"; // –î–∏–∞–ª–æ–≥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å user

            for (Map<String, String> message : conversationMessages) {
                String role = message.get("role");
                String content = message.get("content");

                if (expectedRole.equals(role)) {
                    // –†–æ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π - –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    fixedMessages.add(message);
                    expectedRole = expectedRole.equals("user") ? "assistant" : "user";
                } else if ("user".equals(role) && "assistant".equals(expectedRole)) {
                    // –ü—Ä–æ–ø—É—â–µ–Ω assistant –æ—Ç–≤–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π
                    fixedMessages.add(Map.of("role", "assistant", "content", "–ü–æ–Ω—è–ª."));
                    fixedMessages.add(message);
                    expectedRole = "assistant";
                } else if ("assistant".equals(role) && "user".equals(expectedRole)) {
                    // –õ–∏—à–Ω–∏–π assistant –æ—Ç–≤–µ—Ç - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    log.debug("Skipping redundant assistant message: {}", content.substring(0, Math.min(50, content.length())));
                    continue;
                }
            }
        }

        log.debug("Fixed message structure: {} -> {} messages", history.size(), fixedMessages.size());
        return fixedMessages;
    }

    private String createSonarRequestBody(String userMessage, List<Map<String, String>> history) throws Exception {
        String model = sonarConfig.getModel();
        List<Map<String, Object>> messages = new ArrayList<>();

        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Perplexity API
        List<Map<String, String>> fixedHistory = fixPerplexityMessageStructure(history);

        // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
        for (Map<String, String> historyMessage : fixedHistory) {
            messages.add(Map.of("role", historyMessage.get("role"), "content", historyMessage.get("content")));
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        messages.add(Map.of("role", "user", "content", userMessage));

        Map<String, Object> requestBody = new HashMap<>();
        requestBody.put("model", model);
        requestBody.put("messages", messages);
        requestBody.put("max_tokens", 2000);
        requestBody.put("temperature", 0.7);

        String json = objectMapper.writeValueAsString(requestBody);
        log.info("Using Sonar model: {} for request with {} messages", model, messages.size());
        return json;
    }

    private String createSonarImageRequestBody(String userMessage, String base64Image, List<Map<String, String>> history) throws Exception {
        String model = sonarConfig.getModel();
        List<Map<String, Object>> messages = new ArrayList<>();

        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Perplexity API
        List<Map<String, String>> fixedHistory = fixPerplexityMessageStructure(history);

        // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
        for (Map<String, String> historyMessage : fixedHistory) {
            messages.add(Map.of("role", historyMessage.get("role"), "content", historyMessage.get("content")));
        }

        // –°–æ–∑–¥–∞–µ–º multimodal —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ —Ç–µ–∫—Å—Ç–æ–º
        List<Map<String, Object>> content = new ArrayList<>();
        content.add(Map.of(
                "type", "image_url",
                "image_url", Map.of("url", "data:image/jpeg;base64," + base64Image)
        ));
        content.add(Map.of("type", "text", "text", userMessage));

        messages.add(Map.of("role", "user", "content", content));

        Map<String, Object> requestBody = new HashMap<>();
        requestBody.put("model", model);
        requestBody.put("messages", messages);
        requestBody.put("max_tokens", 1000);
        requestBody.put("temperature", 0.7);

        String json = objectMapper.writeValueAsString(requestBody);
        log.debug("Using Sonar model: {} for image request with {} messages", model, messages.size());
        return json;
    }

    private String parseSonarResponse(String responseBody) throws Exception {
        JsonNode jsonNode = objectMapper.readTree(responseBody);
        JsonNode choices = jsonNode.get("choices");
        if (choices != null && choices.isArray() && choices.size() > 0) {
            JsonNode firstChoice = choices.get(0);
            JsonNode message = firstChoice.get("message");
            if (message != null && message.has("content")) {
                String result = message.get("content").asText().trim();
                result = markdownConverter.convertMarkdownToTelegramHtml(result);
                log.debug("Received Sonar response of length: {}", result.length());
                return result;
            }
        }
        log.warn("Could not parse Sonar response: {}", responseBody);
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Sonar";
    }

    @Override
    public void close() {
        try {
            if (httpClient != null) {
                httpClient.close();
                log.info("HTTP client closed");
            }
        } catch (Exception e) {
            log.error("Error closing HTTP client", e);
        }
    }
}
