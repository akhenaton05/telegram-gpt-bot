package ru.practicum.service;

import jakarta.annotation.PreDestroy;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.ActionType;
import org.telegram.telegrambots.meta.api.methods.send.SendChatAction;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.practicum.client.AnthropicClient;
import ru.practicum.config.ClaudeConfig;
import ru.practicum.config.ProxyConfig;
import ru.practicum.config.TelegramBotConfig;

import java.io.File;

@Slf4j
@Service
@AllArgsConstructor
public class TelegramChatService extends TelegramLongPollingBot {
    private final ClaudeConfig claudeConfig;
    private final ProxyConfig proxyConfig;
    private final TelegramBotConfig telegramBotConfig;
    private final AnthropicClient anthropicClient;

    @Override
    public String getBotUsername() {
        String username = telegramBotConfig.getBotUsername();
        return username.startsWith("@") ? username.substring(1) : username;
    }

    @Override
    public String getBotToken() {
        return telegramBotConfig.getBotToken();
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            Message message = update.getMessage();
            Long chatId = message.getChatId();
            String userMessage = message.getText();

            log.info("Received message from {}: {}", chatId, userMessage);

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if (userMessage.startsWith("/")) {
                handleCommand(chatId, userMessage);
                return;
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..." —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            sendTypingAction(chatId);

            // –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            try {
                String response = anthropicClient.sendMessage(userMessage);
                sendMessage(chatId, response);
            } catch (Exception e) {
                log.error("Error processing message", e);
                sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.");
            }
        }
    }

    private void handleCommand(Long chatId, String command) {
        switch (command) {
            case "/start":
                startAction(String.valueOf(chatId));
                break;

            case "/help":
                sendMessage(chatId,
                        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É –∏—Å–ø–æ–ª—å–∑—É—è Claude AI.\n\n" +
                                "Claude –æ—Å–æ–±–µ–Ω–Ω–æ —Ö–æ—Ä–æ—à –≤:\n" +
                                "- üìù –ù–∞–ø–∏—Å–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤ –∏ —Å—Ç–∞—Ç–µ–π\n" +
                                "- üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –æ—Ç–ª–∞–¥–∫–µ –∫–æ–¥–∞\n" +
                                "- üîç –ê–Ω–∞–ª–∏–∑–µ –∏ —Ä–µ–∑—é–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n" +
                                "- üåç –ü–µ—Ä–µ–≤–æ–¥–∞—Ö –∏ —Ä–∞–±–æ—Ç–µ —Å —è–∑—ã–∫–∞–º–∏\n" +
                                "- ü§î –†–µ—à–µ–Ω–∏–∏ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á");
                break;

            case "/info":
                String modelInfo = claudeConfig.getModel().contains("haiku") ? "Claude 3 Haiku (–±—ã—Å—Ç—Ä—ã–π –∏ —ç–∫–æ–Ω–æ–º–∏—á–Ω—ã–π)"
                        : claudeConfig.getModel().contains("sonnet") ? "Claude 3 Sonnet (—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)"
                        : "Claude 3 Opus (—Å–∞–º—ã–π —É–º–Ω—ã–π)";

                sendMessage(chatId,
                        "ü§ñ Telegram Claude Bot\n" +
                                "–í–µ—Ä—Å–∏—è: 1.0\n" +
                                "–ú–æ–¥–µ–ª—å: " + modelInfo + "\n" +
                                "API: Anthropic Claude\n" +
                                "–ü—Ä–æ–∫—Å–∏: " + (proxyConfig != null && proxyConfig.isEnabled() ? "–≤–∫–ª—é—á–µ–Ω" : "–≤—ã–∫–ª—é—á–µ–Ω") + "\n" +
                                "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @akhenaton05");
                break;

            case "/test":
                sendTypingAction(chatId);
                try {
                    String response = anthropicClient.sendMessage("–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ, —á—Ç–æ —Ç—ã Claude –æ—Ç Anthropic –∏ —Ä–∞–±–æ—Ç–∞–µ—à—å.");
                    sendMessage(chatId, "‚úÖ –¢–µ—Å—Ç —Å–≤—è–∑–∏ —Å Claude:\n\n" + response);
                } catch (Exception e) {
                    log.error("Test command error", e);
                    sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–≤—è–∑–∏ —Å Claude.");
                }
                break;

            default:
                sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.");
        }
    }

    private void sendMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        message.setParseMode("HTML");

        try {
            execute(message);
            log.info("Message sent to {}: {}", chatId, text.substring(0, Math.min(50, text.length())) + "...");
        } catch (TelegramApiException e) {
            log.error("Error sending message to {}", chatId, e);
        }
    }

    private void sendTypingAction(Long chatId) {
        try {
            SendChatAction chatAction = new SendChatAction();
            chatAction.setChatId(chatId);
            chatAction.setAction(ActionType.TYPING);
            execute(chatAction);
        } catch (Exception e) {
            log.debug("Could not send typing action", e);
        }
    }

    private void startAction(String chatId) {
        sendMessageWithPhoto(chatId,
                "\uD83E\uDD11\uD83E\uDD11\uD83E\uDD11\uD83E\uDD11\uD83E\uDD11\uD83E\uDD11\uD83E\uDD11\uD83E\uDD11\uD83E\uDD11\uD83E\uDD11\uD83E\uDD11\uD83E\uDD11 \n \n" +
                        "WELCOME TO *DELETZ GPT* (based on Claude AI) \n \n" +
                        "\uD83E\uDDF1 /info - Deletz bot information \n" +
                        "\uD83E\uDDEE /help - for a help\n" +
                        "\uD83D\uDCE6 /test - to test connection with Claude \n \n" +
                        "\uD83D\uDCB8\uD83D\uDCB8\uD83D\uDCB8\uD83D\uDCB8\uD83D\uDCB8\uD83D\uDCB8\uD83D\uDCB8\uD83D\uDCB8\uD83D\uDCB8\uD83D\uDCB8\uD83D\uDCB8\uD83D\uDCB8",
                "img_start.png");
    }

    private void sendMessageWithPhoto(String chatId, String text, String image) {
        SendPhoto msg = SendPhoto
                .builder()
                .chatId(chatId)
                .photo(new InputFile(new File(image)))
                .caption(text)
                .parseMode("Markdown")
                .build();
        try {
            execute(msg);
        } catch (TelegramApiException e) {
            log.error("Failed to send photo to Telegram chat {}: {}", chatId, e.getMessage());
        }
    }

    @PreDestroy
    public void shutdown() {
        log.info("Shutting down bot...");
        anthropicClient.close();
        log.info("Bot shutdown complete");
    }
}